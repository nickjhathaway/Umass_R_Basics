---
title: Acessing Data Containers
---


## Accesing elements in a vector
To access only certain elements in a vector you use the `[]` operator. You either give index/position of the elements you want or a logical vector of the same length where all the `TRUE` will be extracted. For the positions R used 1-based positions vs the more command [0-based](https://en.wikipedia.org/wiki/Zero-based_numbering) positions in various programming languages.   
```{r}
rNums = runif(20)
print(rNums)

#get the first element
print(rNums[1])

#get the first five elements
print(rNums[1:5])
```

You can get various different positions by giving a vector of positions
```{r}
#get the first 1st, 3rd, and 7th elements
print(rNums[c(1,3,7)])
```
You can also get multiple of the same position
```{r}
#get the first 1st element three times
print(rNums[c(1,1,1)])
```

You can get the elements using logic TRUE and FALSE
```{r}
#get the first 1st element three times
print(rNums> 0.5)
print(rNums[rNums > 0.5])
```

## Accessing elements in a matrix/data.frame
For matrices and data.frames there are multiple ways to access certain subsets of the data, specifically rows and columns. To select rows and columns you use the `[]` operator again. You give rows and column number separated by a comma, leaving one blank means all of them  
```{r}
library(readxl)
sheet1 = read_excel("datasets/ExampleData.xlsx", "Experiment_1")
#get the first row, all columns
sheet1[1,]

#get the 1st and 3rd rows, all columns
sheet1[c(1,3),]

#get the first column, all rows
sheet1[,1]

#get the 1-3 columns, all rows
sheet1[,1:3]

#get the 1-3 columns, 1-3 rows
sheet1[1:3,1:3]
```
Also the default is to assume you mean columns, so if you leave out the comma you will get those columns.  
```{r}
#get the 1-3 columns, all rows
sheet1[,1:3]

#same as above
sheet1[1:3]
```

Also helpful functions here are `ncol()` and `nrow()` which gives you the number of columns and rows for a data.frame/matrix. This can be used if you want certain columns starting at a position and then until the end of the dataframe. 

```{r}
#get the 2nd column to the end of the columns, all rows
sheet1[,2:ncol(sheet1)]

```


## Accesing elementins specific to data.frame
The above examples work for both matrix class and data.frame object but the next couple of examples only work for data.frames

### Accesing by column names using []
With data.frame objects you can give the column name in `[]` to get those columns, you can give one or several
```{r}
sheet1 = read_excel("datasets/ExampleData.xlsx", "Experiment_1")

sheet1["Patient"]

sheet1["Group1-Group1"]

sheet1[c("Patient", "Group1-Group1")]
```
### Accesing by column names using $
You can also access just one column by using the `$` symbol. 

```{r}
sheet1 = read_excel("datasets/ExampleData.xlsx", "Experiment_1")

sheet1$Patient

sheet1$'Group1-Group1'
```
The difference here is that the `$` is going to give just a vector where as `[]` will actually give you back a data.frame

```{r}
sheet1 = read_excel("datasets/ExampleData.xlsx", "Experiment_1")

patientMoney = sheet1$Patient
print(class(patientMoney))
patientBracket = sheet1["Patient"]
print(class(patientBracket))

```

## Adding columns to data.frame
You can also add a column with either the `[]` or the `$`. You can either give a single value that will be repeated for all the values of the column or you can give a vector of the same size. 

```{r}
sheet1 = read_excel("datasets/ExampleData.xlsx", "Experiment_1")

sheet1$Experiment = "Experiment_1"
print(sheet1)

sheet2 = read_excel("datasets/ExampleData.xlsx", "Experiment_2")
print(rep("Experiment_2", nrow(sheet2)))

sheet2["Experiment"] = rep("Experiment_2", nrow(sheet2))
print(sheet2)
```

## All examples   

All below commands will access the same data  

```{r}
head(sheet1)

sheet1[["Group1-Group1"]]

sheet1[,2]

sheet1$`Group1-Group1`

```


## Excercises 

<a download = "time.series.data.txt" href = "datasets/time.series.data.txt">time.series.data.txt</a>  


1.  Read in the [temperature dataset](datasets/Temperatures.txt) from above and find the max, min and mean temperature of your favorite month (columns) and favorite city (rows).  

2.  Create a folder and download the following file, time.series.data.txt, link above, which is a dataset of expression of genes in different cells in several exposure conditions. The rownames are the gene names, the file is tab (`\t`) separated file.     

3.  Read in time.series.data.txt

4.  Find the `max`, `min`, and `max` of the control column and one of the LPS exposure columns (the columns that start with LPS).  

5.  Find the `max`, `min`, and `max` of the several of your favorite genes (or just pick one) (hint: be careful of selection )





